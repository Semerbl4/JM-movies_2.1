{"version":3,"sources":["services/MoviesApiService.js","components/context/context.jsx","components/Filters/Filters.jsx","components/Search/Search.jsx","components/MovieCard/MovieCard.jsx","components/MoviesList/MoviesList.jsx","components/App/App.jsx","index.jsx"],"names":["MoviesApiService","apiKey","getMovies","title","a","page","currentPage","fetch","movies","ok","json","Error","status","getGenres","genres","getGuestSessionId","GetGuestSession","guest_session_id","rateMovie","value","id","guestId","rating","method","headers","body","JSON","stringify","response","getGuestRatedMovies","guestSesId","React","createContext","GenresProvider","Provider","GenresConsumer","Consumer","Filters","props","setSearchMode","setRatedMovies","guestSessionId","toogleLoading","setError","moviesApiService","className","type","name","onClick","event","then","resolve","catch","reject","Search","state","changedInput","inpValue","setState","target","searchValueSaved","this","prevProp","prevState","changeMovies","setSearchValueSaved","placeholder","onKeyUp","debounce","Component","defaultProps","MovieCard","poster","releaseDate","overview","guestRating","genreIds","shortOverview","split","slice","push","moviesApiServise","src","forPoster","alt","style","borderColor","length","allGenIds","gnrIds","map","gnrId","gnr","find","allGnrItem","window","matchMedia","matches","join","count","allowHalf","defaultValue","width","onChange","number","MoviesList","srchMode","loading","searchMode","ratedMovies","size","el","original_title","poster_path","release_date","vote_average","genre_ids","App","error","totalPages","moviesNotFound","online","navigator","onLine","results","err","message","evnt","res","total_pages","rej","setCurrentPage","console","log","isMoviesFound","defaultCurrent","total","showSizeChanger","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7866283f.chunk.js","sourcesContent":["class MoviesApiService {\n  apiKey = 'c33f54366ccf34ec81775c2d46bea63e';\n\n  // получает объект с инфой о фильмах\n  getMovies = async (title, page = null) => {\n    let currentPage = page;\n\n    if (page) {\n      currentPage = `&page=${page}`;\n    } else {\n      currentPage = ``;\n    }\n\n    let movies = await fetch(\n      `https://api.themoviedb.org/3/search/movie?api_key=${this.apiKey}&query=${title}${currentPage}`\n    );\n    // console.log(movies, 'фильмецы')\n\n    if (movies.ok) {\n      movies = await movies.json();\n      return movies;\n    }\n\n    throw new Error(movies.status);\n    // console.log(this.state)\n  };\n\n  // получает жанры при запуске приложения\n  getGenres = async () => {\n    let genres = await fetch(`https://api.themoviedb.org/3/genre/movie/list?api_key=${this.apiKey}&language=en-US`);\n    if (genres.ok) {\n      genres = await genres.json();\n      // console.log(genres, 'все жанры')\n      return genres.genres;\n    }\n\n    throw new Error(genres.status);\n  };\n\n  // получает ID сессии гостя при запуске приложения\n  getGuestSessionId = async () => {\n    let GetGuestSession = await fetch(\n      `https://api.themoviedb.org/3/authentication/guest_session/new?api_key=${this.apiKey}`\n    );\n    if (GetGuestSession.ok) {\n      GetGuestSession = await GetGuestSession.json();\n      // console.log(GetGuestSession.guest_session_id)\n      return GetGuestSession.guest_session_id;\n    }\n\n    throw new Error(GetGuestSession.status);\n  };\n\n  // позволяет оценивать фильмы. Используется при нажатии на звёздочку\n  rateMovie = async (value, id, guestId) => {\n    const rating = { value };\n\n    const response = await fetch(\n      `https://api.themoviedb.org/3/movie/${id}/rating?api_key=${this.apiKey}&guest_session_id=${guestId}`,\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8',\n        },\n        body: JSON.stringify(rating),\n      }\n    );\n\n    await response.json();\n    // console.log(response)\n  };\n\n  // позволяет получить оцененные пользователем фильмы по его ID сессии\n  getGuestRatedMovies = async (guestSesId) => {\n    let movies = await fetch(\n      `https://api.themoviedb.org/3/guest_session/${guestSesId}/rated/movies?api_key=${this.apiKey}`\n    );\n    if (movies.ok) {\n      // console.log(movies)\n      movies = await movies.json();\n      // console.log(movies)\n      return movies;\n    }\n\n    throw new Error(movies.status);\n  };\n}\n\nexport default MoviesApiService;\n","import React from 'react';\n\nconst { Provider: GenresProvider, Consumer: GenresConsumer } = React.createContext();\n\nexport { GenresProvider, GenresConsumer };\n","import './Filters.css';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport MoviesApiService from '../../services/MoviesApiService';\n\nconst Filters = (props) => {\n  const { setSearchMode, setRatedMovies, guestSessionId, toogleLoading, setError } = props;\n\n  const moviesApiService = new MoviesApiService();\n\n  return (\n    <ul className=\"filters\" type=\"none\">\n      <li className=\"filters__filter\">\n        <button\n          className=\"filters__button\"\n          type=\"button\"\n          name=\"search\"\n          onClick={(event) => {\n            setSearchMode(event);\n          }}\n        >\n          Search\n        </button>\n      </li>\n      <li className=\"filters__filter\">\n        <button\n          className=\"filters__button\"\n          type=\"submit\"\n          name=\"rated\"\n          onClick={(event) => {\n            toogleLoading();\n            moviesApiService\n              .getGuestRatedMovies(guestSessionId)\n              .then((resolve) => {\n                setRatedMovies(resolve);\n              })\n              .then(() => setSearchMode(event))\n              .then(() => toogleLoading())\n              .catch((reject) => {\n                setError(reject);\n              });\n          }}\n        >\n          Rated\n        </button>\n      </li>\n    </ul>\n  );\n};\n\nFilters.propTypes = {\n  setSearchMode: PropTypes.func.isRequired,\n  setRatedMovies: PropTypes.func.isRequired,\n  guestSessionId: PropTypes.string.isRequired,\n  toogleLoading: PropTypes.func.isRequired,\n  setError: PropTypes.func.isRequired,\n};\n\nexport default Filters;\n","import './Search.css';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { debounce } from 'lodash';\n\nimport MoviesApiService from '../../services/MoviesApiService';\n\nclass Search extends React.Component {\n  moviesApiService = new MoviesApiService();\n\n  state = {\n    value: '',\n  };\n\n  static defaultProps = {\n    changeMovies: () => {},\n    currentPage: 1,\n  };\n\n  static propTypes = {\n    changeMovies: PropTypes.func,\n    currentPage: PropTypes.number,\n    setSearchValueSaved: PropTypes.func.isRequired,\n    searchValueSaved: PropTypes.string.isRequired,\n  };\n\n  componentDidMount() {\n    const { searchValueSaved } = this.props;\n    this.setState({value: searchValueSaved})\n  }\n\n  componentDidUpdate(prevProp, prevState) {\n    const { currentPage } = this.props;\n    const { value } = this.state;\n    const { changeMovies } = this.props;\n\n    if ((prevState.value !== value || prevProp.currentPage !== currentPage) && value !== '') {\n      changeMovies(value, currentPage);\n    }\n  }\n\n  componentWillUnmount () {\n    const { setSearchValueSaved } = this.props;\n    const { value } = this.state;\n    setSearchValueSaved(value)\n  }\n\n  changedInput = (inpValue) => {\n    this.setState({ value: inpValue.target.value });\n  };\n\n  render() {\n    return (\n      <input\n        type=\"text\"\n        placeholder=\"Type to search...\"\n        className=\"search\"\n        onKeyUp={debounce((event) => {\n          this.changedInput(event);\n        }, 1000)}\n      />\n    );\n  }\n}\n\nexport default Search;\n","import './MovieCard.css';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Rate } from 'antd';\n\nimport MoviesApiService from '../../services/MoviesApiService';\n\nimport { GenresConsumer } from '../context/context';\n\nconst MovieCard = (props) => {\n  // const {key} = props\n\n  // console.log(props)\n\n  const { title, poster, releaseDate, rating, overview, id, guestSessionId, guestRating, genreIds } = props;\n  const shortOverview = overview.split(' ').slice(0, 20);\n  shortOverview.push('...');\n\n  // console.log(guestRating)\n\n  const moviesApiServise = new MoviesApiService();\n\n  const changeRatingColor = () => {\n    if (rating <= 3) {\n      return { borderColor: '#E90000' };\n    }\n    if (rating <= 5) {\n      return { borderColor: '#E97E00' };\n    }\n    if (rating <= 7) {\n      return { borderColor: '#E9D100' };\n    }\n    return { borderColor: '#66E900' };\n  };\n\n  const posterLink = (forPoster) => {\n    if (poster === null) {\n      return null;\n    }\n    return `https://image.tmdb.org/t/p/w500${forPoster}`;\n  };\n\n  const createGenres = (allGenIds, gnrIds) => {\n    const genresForCard = gnrIds.map(gnrId => {\n      const gnr = allGenIds.find(allGnrItem => allGnrItem.id === gnrId);\n      if (!gnr) {\n        return null;\n      }\n      return (\n        <li className=\"movie-card__category\" key={gnrId}>\n          {gnr.name}\n        </li>\n      );\n    });\n    // console.log(genresForCard, 'Наш массив элементов')\n    return genresForCard;\n  };\n\n  return (\n    <GenresConsumer>\n      {(getGenres) => (\n        <div className=\"movie-card\">\n          <img className=\"movie-card__poster\" src={posterLink(poster)} alt=\"Постер\" />\n          <div className=\"movie-card__information\">\n            <h1 className=\"movie-card__title\">{title}</h1>\n            <div className=\"movie-card__raiting\" style={changeRatingColor()}>\n              <p>{rating}</p>\n            </div>\n            <p className=\"movie-card__date\">{releaseDate}</p>\n            {genreIds.length > 0 ? <ul className=\"movie-card__categorys-list\" type=\"none\">\n              {createGenres(getGenres, genreIds)}\n            </ul> : null}\n            {!window.matchMedia('(max-width: 420px)').matches ? (\n              <p className=\"movie-card__overview\">{shortOverview.join(' ')}</p>\n            ) : null}\n            <Rate\n              count={10}\n              allowHalf\n              defaultValue={guestRating}\n              style={{ width: `${231}px` }}\n              onChange={(number) => {\n                moviesApiServise.rateMovie(number, id, guestSessionId);\n              }}\n            />\n          </div>\n          {window.matchMedia('(max-width: 420px)').matches ? (\n            <p className=\"movie-card__overview\">{shortOverview.join(' ')}</p>\n          ) : null}\n        </div>\n      )}\n    </GenresConsumer>\n  );\n};\n\nMovieCard.defaultProps = {\n  releaseDate: 'Дата релиза неизвестна',\n  rating: 0,\n  overview: 'Описание отсутствует',\n  poster: null,\n  id: 0,\n  guestSessionId: null,\n  guestRating: 0,\n};\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  poster: PropTypes.oneOfType([PropTypes.string.isRequired, PropTypes.oneOf([null])]),\n  releaseDate: PropTypes.string,\n  rating: PropTypes.number,\n  overview: PropTypes.string,\n  id: PropTypes.number,\n  guestSessionId: PropTypes.oneOfType([PropTypes.string, PropTypes.oneOf([null])]),\n  guestRating: PropTypes.number,\n  genreIds: PropTypes.arrayOf(PropTypes.number).isRequired,\n};\n\nexport default MovieCard;\n","import './MoviesList.css';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Spin } from 'antd';\nimport MovieCard from '../MovieCard/MovieCard';\n\nconst MoviesList = (props) => {\n  const { movies } = props;\n  const { loading } = props;\n  const { guestSessionId } = props;\n  const { searchMode } = props;\n  const { ratedMovies } = props;\n\n  const createMovieCards = (srchMode) => {\n    // console.log(srchMode, ratedMovies)\n\n    const moviesForCards = srchMode ? movies : ratedMovies;\n\n    if (!movies) {\n      // console.log('ничего нет')\n      return null;\n    }\n\n    // console.log(moviesForCards, 'фильмы')\n\n    const movieCards = moviesForCards.map((el) => (\n      <li key={el.id} className=\"movie-list__item\">\n        <MovieCard\n          title={el.original_title}\n          overview={el.overview}\n          poster={el.poster_path}\n          releaseDate={el.release_date}\n          rating={el.vote_average}\n          id={el.id}\n          guestRating={el.rating}\n          genreIds={el.genre_ids}\n          guestSessionId={guestSessionId}\n        />\n      </li>\n    ));\n    // console.log(movieCards, 'Карточка')\n    return movieCards;\n  };\n\n  if (loading) {\n    return <Spin size=\"large\" className=\"spin_scale\" />;\n  }\n\n  return (\n    <ul className=\"movies-list\" type=\"none\">\n      {createMovieCards(searchMode)}\n    </ul>\n  );\n};\n\nMoviesList.defaultProps = {\n  movies: null,\n  loading: false,\n  guestSessionId: null,\n  ratedMovies: null,\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.object), PropTypes.oneOf([null])]),\n  loading: PropTypes.bool,\n  guestSessionId: PropTypes.oneOfType([PropTypes.string, PropTypes.oneOf([null])]),\n  searchMode: PropTypes.bool.isRequired,\n  ratedMovies: PropTypes.oneOfType([PropTypes.array, PropTypes.oneOf([null])]),\n};\n\nexport default MoviesList;\n","import './App.css';\nimport 'antd/dist/antd.css';\n\nimport React from 'react';\n\nimport { Alert, Pagination } from 'antd';\n\nimport MoviesApiService from '../../services/MoviesApiService';\n\nimport { GenresProvider } from '../context/context';\n\nimport Filters from '../Filters/Filters';\nimport Search from '../Search/Search';\nimport MoviesList from '../MoviesList/MoviesList';\n\nexport default class App extends React.Component {\n  moviesApiServise = new MoviesApiService();\n\n  state = {\n    movies: null,\n    ratedMovies: null,\n    loading: false,\n    error: false,\n    totalPages: null,\n    currentPage: 1,\n    guestSessionId: '',\n    searchMode: true,\n    genres: null,\n    moviesNotFound: false,\n    searchValueSaved: '',\n  };\n\n  online = window.navigator.onLine;\n\n  componentDidMount() {\n    this.moviesApiServise\n      .getGenres()\n      .then((res) => this.setState({ genres: res }))\n      .catch((rej) => {\n        this.setState({ error: rej.message });\n      });\n\n    this.moviesApiServise\n      .getGuestSessionId()\n      .then((res) => {\n        this.setState({ guestSessionId: res });\n      })\n      .catch((rej) => {\n        this.setState({ error: rej.message });\n      });\n  }\n\n  componentDidCatch(err) {\n    this.setState({ error: err });\n  }\n\n  toogleLoading = () => {\n    this.setState((state) => ({\n      loading: !state.loading,\n    }));\n  };\n\n  setRatedMovies = (movies) => {\n    // console.log(movies.results)\n    this.setState({\n      ratedMovies: movies.results,\n    });\n    // this.toogleLoading()\n  };\n\n  setError = (err) => {\n    this.setState({ error: err.message });\n  };\n\n  setSearchValueSaved = (value) => {\n    this.setState({searchValueSaved: value})\n  }\n\n  setSearchMode = (evnt) => {\n    if (evnt.target.name === 'search') {\n      this.setState({\n        searchMode: true,\n      });\n    } else {\n      this.setState({ searchMode: false });\n    }\n  };\n\n  changeMovies = (title, page) => {\n    this.setState((state) => ({\n      loading: !state.loading,\n      totalPages: null,\n    }));\n\n    this.moviesApiServise\n      .getMovies(title, page)\n      .then((res) => {\n        this.setState((state) => ({\n          movies: res.results,\n          loading: !state.loading,\n          totalPages: res.total_pages,\n          moviesNotFound: res.results.length === 0,\n        }));\n      })\n      .catch((rej) => {\n        this.setState({ error: rej.message });\n      });\n  };\n\n  setCurrentPage = (page) => {\n    console.log(page)\n    this.setState({ currentPage: page });\n  };\n\n  isMoviesFound = () => {\n    const { movies } = this.state;\n    const { loading } = this.state;\n    const { guestSessionId } = this.state;\n    const { ratedMovies } = this.state;\n    const { searchMode } = this.state;\n    const { moviesNotFound } = this.state;\n\n    if (moviesNotFound) {\n      return <p className=\"notFoundMessage\">Sry, this movie was not found</p>;\n    }\n    return (\n      <MoviesList\n        movies={movies}\n        ratedMovies={ratedMovies}\n        searchMode={searchMode}\n        loading={loading}\n        guestSessionId={guestSessionId}\n      />\n    );\n  };\n\n  render() {\n    const { movies } = this.state;\n    const { loading } = this.state;\n    const { error } = this.state;\n    const { totalPages } = this.state;\n    const { currentPage } = this.state;\n    const { guestSessionId } = this.state;\n    const { searchMode } = this.state;\n    const { genres } = this.state;\n    const { searchValueSaved } = this.state;\n\n    // console.log(totalPages)\n\n    if (!this.online) {\n      return <Alert type=\"warning\" message=\"Ваш интернет приказал долго жить (Отсутствует соединение сети)\" />;\n    }\n\n    if (error) {\n      return <Alert message={`Произошла ошибка ${error}`} type=\"error\" />;\n    }\n\n    return (\n      <GenresProvider value={genres}>\n        <main className=\"app\">\n          <div className=\"container\">\n            <Filters\n              guestSessionId={guestSessionId}\n              setSearchMode={this.setSearchMode}\n              setRatedMovies={this.setRatedMovies}\n              toogleLoading={this.toogleLoading}\n              setError={this.setError}\n            />\n            {searchMode ? <Search changeMovies={this.changeMovies} currentPage={currentPage}\n            searchValueSaved={searchValueSaved} setSearchValueSaved={this.setSearchValueSaved} /> : null}\n            {this.isMoviesFound()}\n            {!loading && movies && searchMode ? (\n              <Pagination\n                className=\"pagination\"\n                defaultCurrent={currentPage}\n                total={totalPages * 10}\n                showSizeChanger={false}\n                onChange={(page) => {\n                  this.setCurrentPage(page);\n                }}\n              />\n            ) : null}\n          </div>\n        </main>\n      </GenresProvider>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}